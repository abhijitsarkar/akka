akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  log-dead-letters-during-shutdown = on
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s
  log-config-on-start = off
  //  contrib {
  //    persistence.mongodb {
  //      mongo {
  //        mongouri = ${mongo.uri}
  //        journal-collection = "events-journal"
  //      }
  //    }
  //  }
  //  persistence {
  //    journal {
  //      plugin = "akka-contrib-mongodb-persistence-journal"
  //    }
  //  }
}

//akka-contrib-mongodb-persistence-journal {
//  event-adapters {
//    eventAdapter = "org.abhijitsarkar.akka.k8s.watcher.web.EventAdapter"
//  }
//  event-adapter-bindings {
//    "org.abhijitsarkar.akka.k8s.watcher.web.RequestState" = eventAdapter
//    "org.abhijitsarkar.akka.k8s.watcher.domain.FindByAppResponse" = eventAdapter
//    "reactivemongo.bson.BSONDocument" = eventAdapter
//  }
//}

//blocking-dispatcher {
//  type = Dispatcher
//  executor = "thread-pool-executor"
//  thread-pool-executor {
//    fixed-pool-size = 16
//  }
//  throughput = 100
//}

k8s {
  base-url = ${?K8S_BASE_URL}
  namespace = ${?K8S_NAMESPACE}
  cert-file = ${?K8S_CERT_FILE}
  api-token-file = ${?K8S_API_TOKEN_FILE}
  api-token = ${?K8S_API_TOKEN}
  apps = ${?K8S_APPS}
  deletion-enabled = ${?K8S_DELETION_ENABLED}
  deletion-initial-delay-min = ${?K8S_DELETION_INITIAL_DELAY_MIN}
  deletion-interval-min = ${?K8S_DELETION_INTERVAL_MIN}
}

mongo {
  embedded = ${?MONGO_EMBEDDED}
  uri = "mongodb://localhost:27017/db?writeConcern=journaled"
  uri = ${?MONGO_URI}
  collection = ${?MONGO_COLLECTION}
}

k8s-watcher {
  port = ${?K8S_WATCHER_PORT}
}

akka.http {
  // https://doc.akka.io/docs/akka-http/current/scala/http/common/timeouts.html
  // https://github.com/akka/akka-http/issues/1527#issuecomment-349680916
  host-connection-pool {
    idle-timeout = 1d
    client {
      idle-timeout = 1d
    }
  }
  //  client {
  //    idle-timeout = 1d
  //  }
}

ssl-config {
  //  loose {
  //    acceptAnyCertificate = true
  //    disableHostnameVerification = true
  //  }
  trustManager {
    stores = [
      {path = ${?K8S_CERT_FILE}, type = "PEM"}
    ]
  }
  debug {
    ssl = true
    trustmanager = true
    keymanager = true
  }
}

